#!/usr/bin/perl
#######################################################################
#######################################################################
#######################################################################
use DBI;
use DBIx::Connector;
use DBD::mysql;

# Load the form information and set the config file and userid.
local(%in) = &parse_form;
local($sid,%error,%va,%trs,%perm,%config,$tpath);
$in{'sid'} ? ($sid   = $in{'sid'}): ($sid   = '');

##########################################################
##			 Required Libraries		##2
##########################################################

# --------------------------------------------------------
eval {
	require ("../../common/subs/auth.cgi");
	require ("../../common/subs/sub.base.html.cgi");
	require ("../../common/subs/sub.func.html.cgi");
	require ("../../common/subs/sub.wms.html.cgi");
	require ("sub.base.html.cgi");
	require ("sub.func.html.cgi");
	require ("admin.html.cgi");
	require ("admin.reports_ax.cgi");
	
	## Loading Extra Admin Files
	if ($in{'cmd'} =~ /^(\w{3}|\w{2})_/){
		if(-e "../../common/reports/".$1.".cgi"){
			require ("../../common/reports/".$1.".cgi");
		}elsif (-e "./admin.".$1.".cgi"){
			require ("./admin.".$1.".cgi");
		}elsif (-e "../../common/subs/admin/".$1.".pl"){
			require ("../../common/subs/admin/".$1.".pl");
		}
	}

	## Loadng Extra common/Admin
	use Cwd;
	my $dir = getcwd;
	my($b_cgibin,$a_cgibin) = split(/cgi-bin/,$dir);
	my $home_dir = $b_cgibin.'cgi-bin/common';
	
	if ($in{'cmd'} =~ /^(\w+)_|^(\w{7})$/){
		my ($fname) = $1; $fname = $2 if(!$1);

		## Load Libs
		opendir (my $libdir, "$home_dir/subs/admin/") || &cgierr("Unable to open directory $home_dir/subs/admin",604,$!);
			@files = readdir($libdir);		# Read in list of files in directory..
		closedir (LIBDIR);
		FILE: foreach my $file (@files) {
			next if (-d $file);
			require ("$home_dir/subs/admin/$file");
		}
	}
	require ("admin.cfg");
};

if ($@) { &cgierr ("Error loading required libraries,100,$@"); }
eval { &main; };
if ($@) { &cgierr("Fatal error",101,$@); }

exit;



##########################################################
##			MAIN : ADMIN  CGI	##
##########################################################
sub main { 
# --------------------------------------------------------
	$|++;
	&connect_db;
	&auth_cleanup;
	my ($status) = &auth_check_password;
	&auth_logging2($in{'cmd'},'');

	## Logoff
	if ($in{'logoff'}){
		&auth_logging('logout');
		&auth_cleanup($sid);
		$cfg{'auth_logoff'} ?
			(print "Location: $cfg{'auth_logoff'}\n\n"):
			(print "Location: https://www.direksys.com\n\n");
		return;
	}

	#### Check for Right User App
	if ($cfg{'oper_mode'} eq 'updating'){
		&html_updating;
		return;
	}elsif($cfg{'oper_mode'} eq 'closed'){
		&html_closed;
		return;
	}elsif($in{'cmd'} eq 'changee'){	
		if ($usr{'application'}){
			print "Location: $cfg{'pathcgi'}/mod/$usr{'application'}/admin?cmd=home&e=$in{'e'}\n\n";
		}else{
			print "Location: $cfg{'auth_logoff'}\n\n"
		}
		return;
	}elsif($usr{'application'} ne 'admin' and $status eq "ok"){
		&html_notavail;
		return;
	}

	if ($status eq "ok") {
		if(!&check_permissions($in{'cmd'},'','')){ &html_unauth; return; };
		$va{'admin_group'} = &Do_SQL("select id_admin_groups from admin_users_groups where id_admin_users = $usr{'id_admin_users'}")->fetchrow();
		################# Main Menu. #########################
		if ($in{'xtabs'}){  #dhtmlxtabbar
			if (-e "../../common/tabs/".$in{'xtabs'}.".cgi"){
				$in{'db'} = $sys{"db_$in{'cmd'}"};
				@headerfields = split(/,/, $sys{"db_$in{'cmd'}_list"});
				$va{'id_cmd'} = lc($headerfields[0]);
				&load_cfg($in{'db'});
				$in{lc($db_cols[0])} = int($in{lc($db_cols[0])});
				$va{'id_cmd_value'} = int($in{lc($db_cols[0])});
				
				if ($in{lc($db_cols[0])}==0){
					delete($in{lc($db_cols[0])});
					$va{'id_cmd_value'} = int($in{'view'});
					if ($va{'id_cmd_value'}==0){
						$va{'id_cmd_value'} = int($in{'modify'});
						if ($va{'id_cmd_value'}==0){
							delete($va{'id_cmd_value'});
						}
					}
				}
			
				require "../../common/tabs/".$in{'xtabs'}.".cgi";
				&build_tabs;
			}
			#dhtmlxtabbar
		}else{
			if (!&run_function($in{'cmd'})){
				my ($fname) = $cfg{'path_templates'}."/mod/".$usr{'application'}."/".$in{'cmd'} .".html";
				$fname =~ s/\[lang\]/$usr{'pref_language'}/gi;
				if (-e "$fname"){
					print "Content-type: text/html\n\n";
					print &build_page($in{'cmd'} .".html");
				}else{
					my ($fname) = $cfg{'path_templates'}."/common/".$in{'cmd'} .".html";
					$fname =~ s/\[lang\]/$usr{'pref_language'}/gi;
					if(-e "$fname"){
						print "Content-type: text/html\n\n";
						print &build_page($in{'cmd'} .".html");	
					}else{
						&html_base_home('home.html');
					}
				}
				&run_eafunction($in{cmd});
			}
		}
	}else {
		$va{'errormessage'}= $status;
		&html_login_form($status);
	}
	&disconnect_db;
}


sub build_search_result {
# --------------------------------------------------------

	my ($color,$db,%rec)=@_;
	my (@cols) = split(/,/,$sys{'srcols_'.$db});
	my ($output) = "\n<tr onmouseover='m_over(this)' onmouseout='m_out(this)' bgcolor='$color'> ";
	for my $i(0..$#cols){
		if ($cols[$i] =~ /^ID/){
			$output .= "   <td nowrap><input type='submit' name='$rec{$cols[$i]}' value='".&trans_txt('btn_view')."' class='button'>
			   <input type='submit' name='$rec{$cols[$i]}' value='".&trans_txt('btn_edit')."' class='button'>
			   <input type='submit' name='$rec{$cols[$i]}' value='".&trans_txt('btn_del')."' class='button' onclick='notest=false;return;'>
			  </td>\n";
		}else{
			$output .= "   <td>$rec{$cols[$i]}</td>\n";
		}
	}
	return $output;
}

####################################################################
########                 UTILITIES                          ########
####################################################################

sub parse_form {
# --------------------------------------------------------
# Forms Involved: 
# Created on: 1/1/2007 9:43AM
# Last Modified on:
# Last Modified by:
# Author: 
# Description : Decoding Form Data. This is taken in %in hash as pairs.
# Parameters : 
	
	use CGI;

	my (@pairs, %in);
	my ($buffer, $pair, $name, $value);
	if ($ENV{'REQUEST_METHOD'} eq 'GET' or $ENV{'REQUEST_METHOD'} eq 'POST') {
		$cgi = new CGI;
		%in = $cgi->Vars;
		%in = map { lc $_ => $in{$_} } keys %in;
	}else {
		&cgierr ("This script must be called from the Web\nusing either GET or POST requests\n\n");
	}

	foreach my $key (keys %in){
		$in{$key} =~ s/\0/\|/g;
	}

	return %in;
}