#!/usr/bin/perl 
#######################################################################
#######################################################################
#######################################################################


# Load the form information and set the config file and userid.
local(%in) = &parse_form;


eval { &main; };
if ($@) { &cgierr("Fatal error",101,$@); }

exit; 	

sub main {
# --------------------------------------------------------
	my ($status,$key);
	$|++;

	use GD;
	use Barcode::Code128;
	use constant;
#@ivanmiranda soporte de QR
	use GD::Barcode::QRcode;
	if($in{'qr'}){
		binmode(STDOUT);
		print "Content-Type: image/png\n\n";
		$contenido = "facturacion.inova.com.mx?id=$in{'code'}";
		print GD::Barcode::QRcode->new($contenido,{ Ecc => 'L', Version=>2, ModuleSize => 8})->plot->png;
	}else{
		$object = new Barcode::Code128;
		$object->option("border", 0);
		if ($in{'s'}){
		$object->option("scale", "$in{'s'}");
		}else{
		$object->option("scale", 1);
		}
		$object->option("font", "small");
		$object->option("transparent_text", "1");
		$object->option("font_align", "center");

		if ($in{'h'}){
		$object->option("height", $in{'h'});
		}elsif (length($in{'code'})>12){
		$object->option("height", 50);
		}else{
		$object->option("height", 30);
		}

		binmode(STDOUT);
		print "Content-Type: image/png\n\n";
		($in{'code'})?
		(print $object->png($in{'code'})):
		(print $object->png('NO Code'));
	}
}
	
sub parse_form {
# --------------------------------------------------------
	my (@pairs, %in);
	my ($buffer, $pair, $name, $value);	

	if ($ENV{'REQUEST_METHOD'} eq 'GET') {
		@pairs = split(/&/, $ENV{'QUERY_STRING'});
	}elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
		read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
 		@pairs = split(/&/, $buffer);
	}else {
		&cgierr ("This script must be called from the Web\nusing either GET or POST requests\n\n");
	}
	PAIR: foreach my $pair (@pairs) {
		($name, $value) = split(/=/, $pair);
		 
		$name =~ tr/+/ /;
		$name =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

		$value =~ tr/+/ /;
		$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		
		$value =~ s/\r//;
		$value =~ s/<!--(.|\n)*-->//g;			# Remove SSI.
		if ($value eq "---") { next PAIR; }		# This is used as a default choice for select lists and is ignored.
		(exists $in{$name}) ?
			($in{$name} .= "|$value") :		# If we have multiple select, then we tack on
			($in{$name}  = $value);			# using the ~~ as a seperator.
	}
	return %in;
}

##################################################################
#     CGIERR   	#
##################################################################
sub cgierr {
# --------------------------------------------------------
# Last Modified on: 11/10/08 12:30:09
# Last Modified by: MCC C. Gabriel Varela S: Se corrige el formato de la fecha
	my (@sys_err) = @_;
	print "Content-type: text/html\n\n";

	my ($key,$env,$out_in,$out_env);
	if (!$cfg{'cd'}){
		print qq|
			<head>
				<title>CGI - ERROR</title>
			</head>					
			<body BGCOLOR="#FFFFFF" LINK="#FF0000" VLINK="#FF0000" ALINK="#FF0000">
				<table BORDER="0" WIDTH="500" CELLPADDING="10" CELLSPACING="10">
					<tr>
						<td BGCOLOR="#FF0000" colspan="2"><font size="5" color="#FFFFFF" face="Arial"><b>CGI-Error</b></font></td>
					</tr>
				</table>
				<table BORDER="0" WIDTH="550" CELLPADDING="2" CELLSPACING="0">|;
					$sys_err[0]	and print "\n<tr>\n  <td valign='top' width='200'><font face='Arial' size='3'>Error Message</font></td>\n  <td><font face='Arial' size='3' color='#FF0000'><b>$sys_err[0]</b></font></td>\n</tr>\n";
					$sys_err[1]	and print "<tr>\n  <td width='200'><font face='Arial' size='2'>Error Code</font></td>\n  <td><font face='Arial' size='2'>$sys_err[1]</font></td>\n";
					$sys_err[2]	and print "<tr>\n  <td valign='top' width='200'><font face='Arial' size='2'>System Message</font></td>\n  <td><font face='Arial' size='2'>$sys_err[2]</font></td>\n";
					print qq|
					<tr>
						<td colspan="2"><p>&nbsp</p><font face='Arial' size='2'>If the problem persists, please contact us with the above information.</font><br>
							<font face='Arial' size='2'><a href="mailto:$systememail">$systememail</a></font>
						</td>
					</tr>
				</table>
			</body>
		</html>|;
		
		###################################
		###  Save CGI ERR			
		###################################
		my ($ip);
		my (@outmsg) = @sys_err;
		my ($sec, $min, $hour, $day, $mon, $year, $dweek, $dyear, $daylight) = localtime(time());
		$year+=1900;
		$mon++;
		my ($time,$date) = ("$hour:$min:$sec","$mon-$day-$year");
		
		foreach my $key (sort keys %in) {
			$outmsg[3] .= "$key=$in{$key},";
		}
		
		foreach my $env (sort keys %ENV) {
			$outmsg[4] .= "$env=$ENV{$env},";
		}
		
		for (0..4){
			$outmsg[$_] =~ s/\n|\r/ /g;
			$outmsg[$_] =~ s/\|/ /g;
		}
		
		if ($ENV{'REMOTE_ADDR'}){
			$ip = $ENV{'REMOTE_ADDR'};
		}elsif ($ENV{'REMOTE_HOST'}){
			$ip = $ENV{'REMOTE_HOST'};
		}elsif ($ENV{'HTTP_CLIENT_IP'}){
			$ip = $ENV{'HTTP_CLIENT_IP'};
		}else{
			$ip = "Unknow";
		}
	
		(!$cfg{'cgierr_log_file'}) and ($cfg{'cgierr_log_file'} = './logs/cgierr.log');
		if (open (LOG, ">>$cfg{'cgierr_log_file'}")){;
			print LOG "$usr{'username'}|$outmsg[0]|$outmsg[1]|$outmsg[2]|$outmsg[3]|$outmsg[4]|$time|$date|$ip\n";
			close AUTH;
		}
	}else{
		print "<PRE>\n\nCGI ERROR\n==========================================\n";
					$sys_err[0]	and print "Error Message       : $sys_err[0]\n";
					$sys_err[1]	and print "Error Code          : $sys_err[1]\n";
					$sys_err[2]	and print "System Message      : $sys_err[2]\n";
					$0			and print "Script Location     : $0\n";
					$]			and print "Perl Version        : $]\n";
					$sid		and print "Session ID          : $sid\n";


		print "\nForm Variables IN\n-------------------------------------------\n";
		
		foreach my $key (sort keys %in) {
			my $space = " " x (20 - length($key));
			$out_in .= "$key=$in{$key},";
			print "$key$space: $in{$key}\n";
		}
		
		print "\nForm Variables ERROR\n-------------------------------------------\n";
		foreach my $key (sort keys %error) {
			my $space = " " x (20 - length($key));
			print "$key$space: $error{$key}\n";
		}
		
		print "\nEnvironment Variables\n-------------------------------------------\n";
		foreach my $env (sort keys %ENV) {
			my $space = " " x (20 - length($env));
			$out_env .= "$env=$ENV{$env},";
			print "$env$space: $ENV{$env}\n";
		}		
		print "\n</PRE>";
	}

	exit -1;
}
