#!/usr/bin/perl
#######################################################################
#######################################################################
#######################################################################
use DBI;
use DBIx::Connector;
use DBD::mysql;

# Load the form information and set the config file and userid.
local(%in) = &parse_form;
local(@db_cols,%db_select_fields,%db_valid_types,%db_not_null);
local($sid,%error,%va,%trs,%perm);
$in{'sid'} ? ($sid   = $in{'sid'}): ($sid   = '');

# Required Libraries
# --------------------------------------------------------
eval {
	require ("../subs/auth.cgi");
	require ("../subs/sub.base.html.cgi");
	require ("pauth.cfg");
};
if ($@) { &cgierr ("Error loading required Libraries",300,$@); }

eval { &main; };
if ($@) { &cgierr("Fatal error,301,$@"); }

exit;

sub main {
# --------------------------------------------------------
# Last Modified RB: 11/10/08  12:36:22 Added ID_orders_payments value tu sl_orders_plogs

	$|++;
	&connect_db;
	&auth_cleanup;
	my ($status) = &auth_check_password;

	if ($status eq "ok") {
		if ($in{'id_orders'} and $in{'id_orders_payments'} and $in{'ret_url'}){
			print "Content-type: text/html\n\n";
			$in{'ret_url'} =~ s/@/?/;
			$in{'ret_url'} =~ s/\^/=/g;
			$in{'ret_url'} =~ s/~/&/g;
			###print "$in{'ret_url'}<br>";
			###exit 1;
			for (1..60){
				if (open (TXT, "<$cfg{'auth_dir_cc'}$sid")){
					## Decode URD
					LINE: while (<TXT>) {
						$line = $_;
						$line =~ s/\r|\n//g;
						$cdata .= "$line\n";
						($line =~ /([^=]+)=(.*)/) or (next LINE);
						$tmp{$1} = $2;
					}
					## Save Data
					my ($status,$ord_status);
					my ($sth) = &Do_SQL("SELECT * FROM sl_orders_payments WHERE ID_orders_payments='$in{'id_orders_payments'}';");
					my ($rec) = $sth->fetchrow_hashref;
					my ($idorder) = $rec->{'ID_orders'};
					if ($rec->{'Type'} eq 'Credit-Card'){
						if ($tmp{'decision'} eq 'ACCEPT'){
							$ord_status = 'Processed';
							$status = 'Approved';
							$authdate = $tmp{'ccauthreply_authorizeddatetime'};
							$autcode  = $tmp{'ccauthreply_authorizationcode'};
						}elsif($tmp{'decision'} eq 'REVIEW'){
							$ord_status = 'Review';
							$status = 'Pending';
							$authdate = $tmp{'ccauthreply_authorizeddatetime'};
							$autcode  = $tmp{'ccauthreply_authorizationcode'};
						}else{
							$authdate = '';
							$autcode  = '0000';
							$ord_status = 'Pending';
							$status = 'Denied';
						}
					}elsif($rec->{'Type'} eq 'Check'){
						if ($tmp{'PayNetResponseSubcode'} eq '0101'){
							$ord_status = 'Processed';
							$status = 'Approved';
							$authdate = $tmp{'PayNetECheckDate'};
							$autcode  = $tmp{'PayNetECheckAuthorizationNumber'};
						}else{
							$authdate = '';
							$autcode  = '0000';
							$ord_status = 'Pending';
							$status = 'Denied';
						}						
					}
					
					## Update Order
					my ($sth) = &Do_SQL("UPDATE sl_orders_payments SET AuthCode='$autcode',AuthDateTime=NOW(),Status='$status' WHERE ID_orders_payments='$in{'id_orders_payments'}';");
					unlink("$cfg{'auth_dir_cc'}/$sid");
					## Save Payment Logs
					my ($sth) = &Do_SQL("INSERT INTO sl_orders_plogs SET ID_orders='$in{'id_orders'}',ID_orders_payments='$in{'id_orders_payments'}',Data='".&filter_values($cdata)."',Date=Curdate(),Time=NOW(),ID_admin_users='$usr{'id_admin_users'}'");
					if (&load_name('sl_orders','ID_orders',$idorder,'Status') ne 'Shipped'){
						## Update Status
						my ($sth) = &Do_SQL("UPDATE sl_orders SET Status='$ord_status' WHERE ID_orders='$idorder';");
						&auth_logging('opr_orders_st' . $ord_status,$idorder);
						&status_logging($id_order, $ord_status);

					}

					## Add Note
					if ($ord_status eq 'Processed'){						
						&add_order_notes_by_type($idorder,'Processed. OK To Ship',"Low");
					}else{						
						&add_order_notes_by_type($idorder,'Pending',"Low");
					}
					
					## Save User Log
					$in{'db'} = 'sl_orders';
					&auth_logging('opr_orders_procpayment',$rec->{'ID_orders'});
					
					print qq|<script type="text/javascript">\n
						parent.location.href = "$in{'ret_url'}";
					</script>\n|;				
					exit;
				}
				sleep(1);
			}
			print qq|<script type="text/javascript">\n
				this.location.href = "/cgi-bin/common/apps/pauth.cgi?id_orders=$in{'id_orders'}&id_orders_payments=$in{'id_orders_payments'}&ret_url=$in{'ret_url'}";
			</script>\n|;
		}else{
			print "Content-type: text/html\n\n";
			#print "$in{'id_orders'} and $in{'id_orders_payments'} and $in{'ret_url'}";
			&html_blank;
			#&cgierr;
		}
	}else {
		&html_blank;
	}
	&disconnect_db;
}

##########################################################
##			Query				##
##########################################################
sub parse_form {
# --------------------------------------------------------
# Forms Involved: 
# Created on: 1/1/2007 9:43AM
# Last Modified on:
# Last Modified by:
# Author: 
# Description : Decoding Form Data. This is taken in %in hash as pairs.
# Parameters : 
	my (@pairs, %in);
	my ($buffer, $pair, $name, $value);
	if ($ENV{'REQUEST_METHOD'} eq 'GET') {
		@pairs = split(/&/, $ENV{'QUERY_STRING'});
	}elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
		read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
 		@pairs = split(/&/, $buffer);
 		$ENV{'QUERY_STRING'} =  $buffer;
 		$ENV{'REQUEST_METHOD'} = 'GET';
	}else {
		&cgierr ("This script must be called from the Web\nusing either GET or POST requests\n\n");
	}
	
	PAIR: foreach $pair (@pairs) {
			($name, $value) = split(/=/, $pair);
		
			$name =~ tr/+/ /;
			$name =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
			$name = lc($name);
		
			$value =~ tr/+/ /;
			$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		
			$value =~ s/^\s+//g;
			$value =~ s/\s+$//g;
			
			$value =~ s/\r//g;
			#$value =~ s/<!--(.|\n)*-->//g;			# Remove SSI.
			if ($value eq "---") { next PAIR; }		# This is used as a default choice for select lists and is ignored.
			
			(exists $in{$name}) ?
				($in{$name} .= "|$value") :		# If we have multiple select, then we tack on
				($in{$name}  = $value);			# using the ~~ as a seperator.
	}
	
	return %in;
}

##################################################################
#     CGIERR   	#
##################################################################
sub cgierr {
# --------------------------------------------------------
# Last Modified on: 11/10/08 12:22:14
# Last Modified by: MCC C. Gabriel Varela S: Se corrige la forma en que se muestra la fecha
	my (@sys_err) = @_;
	print "Content-type: text/html\n\n";

	my ($key,$env,$out_in,$out_env);
	if (!$cfg{'cd'}){
		print qq|
					<head>
									<title>CGI - ERROR</title>
					</head>					
					<body BGCOLOR="#FFFFFF" LINK="#FF0000" VLINK="#FF0000" ALINK="#FF0000">
					
									<table BORDER="0" WIDTH="500" CELLPADDING="10" CELLSPACING="10">
									  <tr>
									    <td BGCOLOR="#FF0000" colspan="2"><font size="5" color="#FFFFFF" face="Arial"><b>CGI-Error</b></font></td>
									  </tr>
									</table>
									<table BORDER="0" WIDTH="550" CELLPADDING="2" CELLSPACING="0">|;
										$sys_err[0]	and print "\n<tr>\n  <td valign='top' width='200'><font face='Arial' size='3'>Error Message</font></td>\n  <td><font face='Arial' size='3' color='#FF0000'><b>$sys_err[0]</b></font></td>\n</tr>\n";
										$sys_err[1]	and print "<tr>\n  <td width='200'><font face='Arial' size='2'>Error Code</font></td>\n  <td><font face='Arial' size='2'>$sys_err[1]</font></td>\n";
										$sys_err[2]	and print "<tr>\n  <td valign='top' width='200'><font face='Arial' size='2'>System Message</font></td>\n  <td><font face='Arial' size='2'>$sys_err[2]</font></td>\n";
										print qq|
									<tr>
									  <td colspan="2"><p>&nbsp</p><font face='Arial' size='2'>If the problem percist, please contact us with the above Information.</font><br>
											<font face='Arial' size='2'><a href="mailto:$systememail">$systememail</a></font></td>
									</tr>
									  </table>
					</body>
					</html>|;
		######################################
		### Save CGI ERR			
		##############################
		my ($ip);
		my (@outmsg) = @sys_err;
		my ($sec, $min, $hour, $day, $mon, $year, $dweek, $dyear, $daylight) = localtime(time());
		$year+=1900;
		$mon++;
		my ($time,$date) = ("$hour:$min:$sec","$mon-$day-$year");
		
		foreach $key (sort keys %in) {
			$outmsg[3] .= "$key=$in{$key},";
		}
		
		foreach $env (sort keys %ENV) {
			$outmsg[4] .= "$env=$ENV{$env},";
		}
		
		for (0..4){
			$outmsg[$_] =~ s/\n|\r/ /g;
			$outmsg[$_] =~ s/\|/ /g;
		}
		
		if ($ENV{'REMOTE_ADDR'}){
			$ip = $ENV{'REMOTE_ADDR'};
		}elsif ($ENV{'REMOTE_HOST'}){
			$ip = $ENV{'REMOTE_HOST'};
		}elsif ($ENV{'HTTP_CLIENT_IP'}){
			$ip = $ENV{'HTTP_CLIENT_IP'};
		}else{
			$ip = "Unknow";
		}
	
		(!$cfg{'cgierr_log_file'}) and ($cfg{'cgierr_log_file'} = './logs/cgierr.log');
		if (open (LOG, ">>$cfg{'cgierr_log_file'}")){;
			print LOG "$usr{'username'}|$outmsg[0]|$outmsg[1]|$outmsg[2]|$outmsg[3]|$outmsg[4]|$time|$date|$ip\n";
			close AUTH;
		}
	

	}else{
		print "<PRE>\n\nCGI ERROR\n==========================================\n";
					$sys_err[0]	and print "Error Message       : $sys_err[0]\n";
					$sys_err[1]	and print "Error Code          : $sys_err[1]\n";
					$sys_err[2]	and print "System Message      : $sys_err[2]\n";
					$0			and print "Script Location     : $0\n";
					$]			and print "Perl Version        : $]\n";
					$sid		and print "Session ID          : $sid\n";


		print "\nForm Variables IN\n-------------------------------------------\n";
		
		foreach $key (sort keys %in) {
			my $space = " " x (20 - length($key));
			$out_in .= "$key=$in{$key},";
			print "$key$space: $in{$key}\n";
		}
		
		print "\nForm Variables ERROR\n-------------------------------------------\n";
		foreach $key (sort keys %error) {
			my $space = " " x (20 - length($key));
			print "$key$space: $error{$key}\n";
		}
		
		print "\nEnvironment Variables\n-------------------------------------------\n";
		foreach $env (sort keys %ENV) {
			my $space = " " x (20 - length($env));
			$out_env .= "$env=$ENV{$env},";
			print "$env$space: $ENV{$env}\n";
		}
		
		print "\n</PRE>";

	}

	exit -1;
}
