#!/usr/bin/perl
#######################################################################
#######################################################################
#######################################################################
use DBI;
use DBIx::Connector;
use DBD::mysql;

# Load the form information and set the config file and userid.
local(%in) = &parse_form;
local(@db_cols,%db_select_fields,%db_valid_types,%db_not_null);
local($sid,%error,%va,%trs,%perm);
$in{'sid'} ? ($sid   = $in{'sid'}): ($sid   = '');
# Required Libraries
# --------------------------------------------------------
eval {
	require ("../subs/auth.cgi");
	require ("../subs/sub.base.html.cgi");
	require ("../subs/sub.func.html.cgi");
	require ("ajaxbuild.mer.cgi");
	require ("ajaxbuild.opr.cgi");
	require ("ajaxbuild.wms.cgi");
	require ("ajaxbuild.tabs.cgi");
	require ("ajaxbuild.html.cgi");
	require ("ajaxbuild.con.cgi");
	require ("ajaxbuild.fin.cgi");
	require ("ajaxbuild.cfg");
};

if ($@) { &cgierr ("Error loading required Libraries",300,$@); }

eval { &main; };
if ($@) { &cgierr("Fatal error,301,$@"); }

exit;

sub main {	
# --------------------------------------------------------
	$|++;
	&connect_db;
	&auth_cleanup;
	my ($status) = &auth_check_password;
	if ($status eq "ok") {
		if(!&check_permissions($in{'ajaxbuild'},'','')){ &html_unauth; return; };
		my ($cmd) = $in{'ajaxbuild'};
		if (defined &$cmd){
			&connect_db;
			&$cmd();
			return;
		}else{
			print "Content-type: text/html\n\n";
			print "Error: Function $cmd not Defined";
		}
		&html_blank;
	}else {
		&html_blank;
	}
	&disconnect_db;
}


sub filter_chars {
# ----------------------------------------------------------------------------
	my (%tmp) = @_;
	foreach $key (keys %tmp){
		$tmp{$key} =~ s/á/a/g;
		$tmp{$key} =~ s/é/e/g;
		$tmp{$key} =~ s/í/i/g;
		$tmp{$key} =~ s/ó/o/g;
		$tmp{$key} =~ s/ú/u/g;
		$tmp{$key} =~ s/Á/A/g;
		$tmp{$key} =~ s/É/E/g;
		$tmp{$key} =~ s/Í/I/g;
		$tmp{$key} =~ s/Ó/O/g;
		$tmp{$key} =~ s/Ú/U/g;
		$tmp{$key} =~ s/ñ/n/g;
		$tmp{$key} =~ s/Ñ/N/g;
	}
	return %tmp;
}

#########################################################
##			Query				##
##########################################################
sub parse_form {
# --------------------------------------------------------
	my (@pairs, %in);
	my ($buffer, $pair, $name, $value);

	if ($ENV{'REQUEST_METHOD'} eq 'GET') {
		@pairs = split(/&/, $ENV{'QUERY_STRING'});
	}elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
		read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
 		@pairs = split(/&/, $buffer);
	}else {
		&cgierr ("This script must be called from the Web\nusing either GET or POST requests\n\n");
	}
	PAIR: foreach $pair (@pairs) {
		($name, $value) = split(/=/, $pair);
	
		$name =~ tr/+/ /;
		$name =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		$name = lc($name);

		$value =~ tr/+/ /;
		$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

		$value =~ s/^\s+//g;
		$value =~ s/\s+$//g;

		#$value =~ s/\r//g;
		$value =~ s/<!--(.|\n)*-->//g;			# Remove SSI.
		if ($value eq "---") { next PAIR; }		# This is used as a default choice for select lists and is ignored.
		(exists $in{$name}) ?
			($in{$name} .= "|$value") :		# If we have multiple select, then we tack on
			($in{$name}  = $value);			# using the ~~ as a seperator.
	}
	return %in;
}

1;
