#!/usr/bin/perl

#######################################################################
#######################################################################
#######################################################################
use CGI qw/:standard :html3/;
use DBI;
use DBIx::Connector;
use DBD::mysql;


# Load the form information and set the config file and userid.
local(%in) = &parse_form;
#local($sid,%error,%va,%trs,%perm);
local ($upload_dir) = $cfg{'auth_home'};
local ($temp_file) = "tempexp.csv";
local ($err_file) = "temperr.csv";

#$in{'sid'} ? ($sid   = $in{'sid'}): ($sid   = '');

# Required Libraries
# --------------------------------------------------------
eval {
	require ("../subs/auth.cgi");
	require ("../subs/sub.base.html.cgi");
	require ("upfile.cfg");
};
if ($@) { &cgierr ("Error loading required libraries,100,$@"); }

eval { &main; };
if ($@) { &cgierr("Fatal error,501,$@ $!"); }

exit;

sub main {
# --------------------------------------------------------
	$|++;
	&connect_db;
	&auth_cleanup;
	my ($status) = &auth_check_password;
	$in{'sit_app'} = 'upfile_';
	if ($in{'phonelist'} and $status eq 'ok'){
		&html_phonelist;
	}elsif ($in{'filetype'} eq 'adjustment'){
		&adj_upload;
	}elsif ($in{'filetype'} eq 'bills'){
		&bills_upload;
	}elsif($in{'programming_file'} and $status eq 'ok'){
		&showsp;	
	}elsif($in{'app'} and "wms"){
		&html_upload;		
	}elsif($in{'app'} and "imgman"){
		&html_imgman;	
	}else{
		&html_message;
	}
}

sub adj_upload {
# --------------------------------------------------------
	##
	if ($in{'file'} and $in{'id_adjustments'}){
		my ($result) = &load_convfile("$cfg{'path_upfiles'}adjustments/$in{'id_adjustments'}.txt",$bin);
		if($result eq 1){
			$va{'message'} = 'File Uploaded';	
		}else{
			$va{'message'} = 'No Records Found on File';
		}
	}else{
		$va{'message'} = 'No File to Upload';
	}
	
	
	
	print "Content-type: text/html\n\n";
	print &build_page('upfile:message.html');
}

#############################################################################
#############################################################################
#	Function: bills_upload
#
#	Created on: 07/05/2013  11:32:10
#
#	Author: Alejandro Diaz
#
#	Modifications: 
#
#	Parameters:
#
#	Returns:
#
#	See Also:
#
#
sub bills_upload {
#############################################################################
#############################################################################
	use POSIX qw/strftime/;
	my $curdate = strftime("%d%m%Y", localtime);
	if ($in{'file'} and $in{'action'}){
		if (-e "$cfg{'path_upfiles'}") {
			if (-w "$cfg{'path_upfiles'}") {
				$extensions = ($cfg{'upload_allowed_file_extensions_bills'})?$cfg{'upload_allowed_file_extensions_bills'}:$cfg{'upload_allowed_file_extensions'};
				my ($result) = &load_convfile("$cfg{'path_upfiles'}bills-$curdate.txt",$bin,$extensions);
				
				if(int($result) == 1){
					$va{'message'} = &trans_txt('upfile_ok');
				}elsif(int($result) == 2){
					$va{'message'} = &trans_txt('upfile_not_allowed');
				}else{
					$va{'message'} = &trans_txt('upfile_not_records_found');
				}
			}else{
				$va{'message'} = &trans_txt('upfile_target_not_written');
			}
		}else{
			$va{'message'} = &trans_txt('upfile_target_not_exists=');
		}
	}else{
		$va{'message'} = &trans_txt('upfile_nofile');
	}
	
	print "Content-type: text/html\n\n";
	print &build_page('upfile:message.html');
}

sub html_upload {
# --------------------------------------------------------
# Created on: 11/14/2007 12:15PM
# Author: Rafael Sobrino
# Description : Uploads a file to the server
# Notes: 

	my ($file) = "$cfg{'path_shpfiles'}$in{'file'}";
	if (&load_convfile($file) == 1){
		$va{'message'} = &trans_txt('upfile_ok');
		print "Content-type: text/html\n\n";
		print &build_page('outbound_updtrk.html');				
	}elsif (&load_convfile($file) == 2){
		$va{'message'} = &trans_txt('upfile_exists');
		print "Content-type: text/html\n\n";
		print &build_page('outbound_updtrk.html');			
	}else{
		&html_uploaderr;
	}		
}

sub load_ups_2tbl {
# --------------------------------------------------------
# Created on: 11/15/2007 2:25PM
# Author: Rafael Sobrino
# Description : Load .csv file to sl_tracking_numbers table
# Notes: 

	open (FILE, "$upload_dir$temp_file");
	while ($record = <FILE>){
		if ($count >0){		# The first record are the headers
			my (@ary) = split(',', $record);
			$index = &indexOf($record,',');
			$tracking_no = substr($record,0,$index);
			$data = substr($record,$index+1);
			$index = &indexOf($data,',');
			$id_orders_products = substr($data,0,$index);
			$data = substr($data,$index+1);
			
			#&cgierr("$tracking_no\n$id_orders_products\n$data");		
			my ($sth) = &Do_SQL("SELECT COUNT(*) FROM sl_tracking_numbers WHERE ID_tracking_numbers='$tracking_no'");
			$va{'matches'} = $sth->fetchrow;		
			if ($va{'matches'} eq 0){
				## insert record
				$sth = &Do_SQL("INSERT INTO sl_tracking_numbers VALUES('$tracking_no','$id_orders_products','".&filter_values($data)."','Inactive','Curdate()','NOW()','$usr{'id_admin_users'}')");
			}else{
				## update record
				$sth = &Do_SQL("UPDATE sl_tracking_numbers SET ID_tracking_numbers='$tracking_no',ID_orders_products='$id_orders_products',Data='".&filter_values($data)."',Status='Inactive',Date=Curdate(),Time=NOW(),ID_admin_users='$usr{'id_admin_users'}'");
			}
  	}
  	$count++;
 	}
	close(FILE);
}

sub update_ups_data {
# --------------------------------------------------------
# Created on: 11/14/2007 2:25PM
# Author: Rafael Sobrino
# Description : 
# Notes: 

	my ($sth) = &Do_SQL("SELECT ID_orders_products FROM sl_tracking_numbers WHERE Status='Inactive'");
	while ($rec = $sth->fetchrow_hashref){
		my ($tmp) = &Do_SQL("SELECT COUNT(*) FROM sl_orders_products2 WHERE ID_orders_products='$rec->{'ID_orders_products'}'");
		$va{'matches'} = $tmp->fetchrow;
		if ($va{'matches'} > 1 or $va{'matches'} eq 0){
			## invalid record
			&Do_SQL("UPDATE sl_tracking_numbers SET Status='Active' WHERE ID_orders_products='$rec->{'ID_orders_products'}'");
		}else{
			## valid record - update table sl_orders_products
			my ($tmp2) = &Do_SQL("SELECT * FROM sl_tracking_numbers WHERE ID_orders_products='$rec->{'ID_orders_products'}'");
			while ($rec2 = $tmp2->fetchrow_hashref){
				my (@ary) = split(',',$rec2->{'Data'});
				## update table sl_orders_products
				$shpDate = &format_date($ary[7]);		## common/sub.base_sltv.html.cgi
				my ($sth) = &Do_SQL("UPDATE sl_orders_products2 SET shpDate='$shpDate',Tracking='$rec->{'ID_tracking_numbers'}',shpProvider='UPS' WHERE ID_orders='$rec->{'ID_orders_products'}'");
				## update status in orders table if it doesn't say 'Shipped'
				$sth = &Do_SQL("SELECT Status FROM sl_orders2 WHERE ID_orders='$rec->{'ID_orders_products'}';");
				$rec = $sth->fetchrow_hashref;
				if ($rec->{'Status'} ne "Shipped"){
					$sth = &Do_SQL("UPDATE sl_orders2 SET Status='Shipped' WHERE ID_orders='$rec->{'ID_orders_products'}';");
				}				
			}
		}
	}
}

#sub load_ups_data {
## --------------------------------------------------------
## Created on: 11/14/2007 2:25PM
## Author: Rafael Sobrino
## Description : 
## Notes: 
#
#	my ($count)  = 0;
#	my ($errors) = 0;
#	my ($valid)  = 0;
#		
#	open (FILE, "$upload_dir$temp_file");
#	while ($record = <FILE>){
#		if ($count >0){
#			my (@ary) = split(',', $record);
#			if ($ary[1] < 1000){
#				## add record to errors file 
#				&add_record("$upload_dir$err_file",$record);
#				$errors++;
#			}else{
#				## if id_orders cannot be found in the record, add entire record to the errors list
#				my ($sth) = &Do_SQL("SELECT COUNT(*) FROM sl_orders_products2 WHERE ID_orders='$ary[1]'");
#				$va{'matches'} = $sth->fetchrow;		
#				if ($va{'matches'} eq 1){
#					## update table sl_orders_products
#					$shpDate = &format_date($ary[9]);		## common/sub.base_sltv.html.cgi
#					my ($sth) = &Do_SQL("UPDATE sl_orders_products2 SET shpDate='$shpDate',Tracking='$ary[0]',shpProvider='UPS' WHERE ID_orders='$ary[1]'");
#					## update status in orders table if it doesn't say 'Shipped'
#					$sth = &Do_SQL("SELECT Status FROM sl_orders2 WHERE ID_orders='$ary[1]';");
#					$rec = $sth->fetchrow_hashref;
#					if ($rec->{'Status'} ne "Shipped"){
#						$sth = &Do_SQL("UPDATE sl_orders2 SET Status='Shipped' WHERE ID_orders='$ary[1]';");
#					}
#					$valid++;
#				}else{
#					add_record("$upload_dir$err_file",$record);
#					$errors++;							
#				}
#			}
#  	}
#  	$count++;
# 	}
#	close(FILE);
#	
#	$count -= 1;
#	$va{'searchresults'} = qq |
#		<tr 'onmouseover='m_over(this)' onmouseout='m_out(this)'>
#			<td>$in{'file'}</td>
#			<td align='center'>$valid</td>
#			<td align='center' onClick=\"trjump('/cgi-bin/mod/wms/admin?cmd=load_ups_invdata')\">$errors</td>
#			<td align='center'>$count</td>
#		</tr>	|;
#}

sub file_type {
# --------------------------------------------------------
# Created on: 11/14/2007 12:15PM
# Author: Rafael Sobrino
# Description : 
# Notes: 

	if (open (FILE, "$upload_dir$temp_file")){
		while ($record = <FILE>){		
			## found out the number of fields (commas) to determine file type
			my (@ary) = split(',', $record);
			
			return $#ary;
		}
		close (FILE);			
	}
	return 0;
}





sub html_uploaderr {
# --------------------------------------------------------
# Created on: 11/14/2007 12:15PM
# Author: Rafael Sobrino
# Description : 
# Notes: 

	$va{'message'} = &trans_txt('upfile_err');
	print "Content-type: text/html\n\n";
	print &build_page('outbound_updtrk.html');
}

sub html_report {
# --------------------------------------------------------
# Created on: 11/15/2007 12:04PM
# Author: Rafael Sobrino
# Description : 
# Notes: 

	$va{'message'} = @_[0];
	print "Content-type: text/html\n\n";
	print &build_page('outbound_report.html');
}

sub html_uploaded {
# --------------------------------------------------------
# Created on: 
# Author: Carlos Haas
# Description : 
# Notes: 

	$va{'message'} = @_[0];
	print "Content-type: text/html\n\n";
	print &build_page('outbound_uploaded.html');
}

sub html_message {
# --------------------------------------------------------
	$va{'message'} = @_[0];
	print "Content-type: text/html\n\n";
	print &build_page('upfile:message.html');
}

################################################################
################################################################
################################################################
################################################################

sub parse_form {
# --------------------------------------------------------
	my (%in, $value);
	if ($ENV{'REQUEST_METHOD'} ne 'GET' and $ENV{'REQUEST_METHOD'} ne 'POST') {
		&cgierr ("This script must be called from the Web\nusing either GET or POST requests\n\n");
	}
	PAIR: foreach $key (param){
		$value = param($key);
		$value =~ s/<!--(.|\n)*-->//g;			# Remove SSI.
		$value =~ s/\r//g;
		if ($value eq "---") { next PAIR; }		# This is used as a default choice for select lists and is ignored.
		if ($value =~ /^\s*$/) { next PAIR; }		# This is used as a default choice for select lists and is ignored.
		(exists $in{$key}) ?
			($in{$key} .= "~~$value") :		# If we have multiple select, then we tack on
			($in{$key}  = $value);
		$in{$key} = $value;
	}
	return %in;
}

##################################################################
#     CGIERR   	#
##################################################################
sub cgierr {
# --------------------------------------------------------
# Last Modified on: 11/10/08 12:09:34
# Last Modified by: MCC C. Gabriel Varela S: Se corrige la forma de mostrar la fecha
	my (@sys_err) = @_;
	print "Content-type: text/html\n\n";

	my ($key,$env,$out_in,$out_env);
	if (!$cfg{'cd'}){
		print qq|
			<head>
				<title>CGI - ERROR</title>
			</head>					
			<body BGCOLOR="#FFFFFF" LINK="#FF0000" VLINK="#FF0000" ALINK="#FF0000">			
				<table BORDER="0" WIDTH="500" CELLPADDING="10" CELLSPACING="10">
					<tr>
						<td BGCOLOR="#FF0000" colspan="2"><font size="5" color="#FFFFFF" face="Arial"><b>CGI-Error</b></font></td>
					</tr>
				</table>
				<table BORDER="0" WIDTH="550" CELLPADDING="2" CELLSPACING="0">|;
					$sys_err[0]	and print "\n<tr>\n  <td valign='top' width='200'><font face='Arial' size='3'>Error Message</font></td>\n  <td><font face='Arial' size='3' color='#FF0000'><b>$sys_err[0]</b></font></td>\n</tr>\n";
					$sys_err[1]	and print "<tr>\n  <td width='200'><font face='Arial' size='2'>Error Code</font></td>\n  <td><font face='Arial' size='2'>$sys_err[1]</font></td>\n";
					$sys_err[2]	and print "<tr>\n  <td valign='top' width='200'><font face='Arial' size='2'>System Message</font></td>\n  <td><font face='Arial' size='2'>$sys_err[2]</font></td>\n";
					print qq|
					<tr>
						<td colspan="2"><p>&nbsp</p><font face='Arial' size='2'>If the problem percist, please contact us with the above Information.</font><br>
							<font face='Arial' size='2'><a href="mailto:$systememail">$systememail</a></font>
						</td>
					</tr>
				</table>
			</body>
		</html>|;
		######################################
		### Save CGI ERR			
		##############################
		my ($ip);
		my (@outmsg) = @sys_err;
		my ($sec, $min, $hour, $day, $mon, $year, $dweek, $dyear, $daylight) = localtime(time());
		$year+=1900;
		$mon++;
		my ($time,$date) = ("$hour:$min:$sec","$mon-$day-$year");
		
		foreach $key (sort keys %in) {
			$outmsg[3] .= "$key=$in{$key},";
		}
		
		foreach $env (sort keys %ENV) {
			$outmsg[4] .= "$env=$ENV{$env},";
		}
		
		for (0..4){
			$outmsg[$_] =~ s/\n|\r/ /g;
			$outmsg[$_] =~ s/\|/ /g;
		}
		
		if ($ENV{'REMOTE_ADDR'}){
			$ip = $ENV{'REMOTE_ADDR'};
		}elsif ($ENV{'REMOTE_HOST'}){
			$ip = $ENV{'REMOTE_HOST'};
		}elsif ($ENV{'HTTP_CLIENT_IP'}){
			$ip = $ENV{'HTTP_CLIENT_IP'};
		}else{
			$ip = "Unknow";
		}
		(!$cfg{'cgierr_log_file'}) and ($cfg{'cgierr_log_file'} = './logs/cgierr.log');
		if (open (LOG, ">>$cfg{'cgierr_log_file'}")){;
			print LOG "$usr{'username'}|$outmsg[0]|$outmsg[1]|$outmsg[2]|$outmsg[3]|$outmsg[4]|$time|$date|$ip\n";
			close AUTH;
		}
	}else{
		print "<PRE>\n\nCGI ERROR\n==========================================\n";
					$sys_err[0]	and print "Error Message       : $sys_err[0]\n";
					$sys_err[1]	and print "Error Code          : $sys_err[1]\n";
					$sys_err[2]	and print "System Message      : $sys_err[2]\n";
					$0			and print "Script Location     : $0\n";
					$]			and print "Perl Version        : $]\n";
					$sid		and print "Session ID          : $sid\n";


		print "\nForm Variables IN\n-------------------------------------------\n";
		
		foreach $key (sort keys %in) {
			my $space = " " x (20 - length($key));
			$out_in .= "$key=$in{$key},";
			print "$key$space: $in{$key}\n";
		}
		
		print "\nForm Variables ERROR\n-------------------------------------------\n";
		foreach $key (sort keys %error) {
			my $space = " " x (20 - length($key));
			print "$key$space: $error{$key}\n";
		}
		
		print "\nEnvironment Variables\n-------------------------------------------\n";
		foreach $env (sort keys %ENV) {
			my $space = " " x (20 - length($env));
			$out_env .= "$env=$ENV{$env},";
			print "$env$space: $ENV{$env}\n";
		}
		
		print "\n</PRE>";

	}

	exit -1;
}
